{
  "stats": {
    "suites": 2,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2017-08-24T09:02:41.982Z",
    "end": "2017-08-24T09:02:42.050Z",
    "duration": 68,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Stack",
        "suites": [],
        "tests": [
          {
            "title": "should be able to create a stack object.",
            "fullTitle": "Stack should be able to create a stack object.",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "ae7af754-bea6-44f9-8b3b-071535902309",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have 2 properties. top and length",
            "fullTitle": "Stack should have 2 properties. top and length",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
            "err": {},
            "isRoot": false,
            "uuid": "2b6dfd8d-9773-43ac-b187-e893de6d84a5",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say if stack is empty",
            "fullTitle": "Stack should say if stack is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
            "err": {},
            "isRoot": false,
            "uuid": "0a1093fe-c86f-4fd0-b579-f3ddc3e65beb",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to push",
            "fullTitle": "Stack should be able to push",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
            "err": {},
            "isRoot": false,
            "uuid": "49ca5f40-fff2-4922-a800-0a2298769102",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek",
            "fullTitle": "Stack should be able to peek",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
            "err": {},
            "isRoot": false,
            "uuid": "df56fb2c-4792-4b24-b933-eb9be9057637",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say determine if it is empty",
            "fullTitle": "Stack should say determine if it is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "25bd7a4c-dcb3-430e-b0be-019fca060ed7",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to pop",
            "fullTitle": "Stack should be able to pop",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "d226bf2d-3266-480a-a34f-09a492593670",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to clear all elements",
            "fullTitle": "Stack should be able to clear all elements",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
            "err": {},
            "isRoot": false,
            "uuid": "f1e84943-7be7-4add-acf0-900848be9c24",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to convert the instance as an array",
            "fullTitle": "Stack should be able to convert the instance as an array",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
            "err": {},
            "isRoot": false,
            "uuid": "661d3d6f-843a-450e-98a1-c9aae5593f37",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\index.test.js",
        "uuid": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Stack \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stack = new _index2.default();",
            "err": {},
            "isRoot": false,
            "uuid": "87ff6498-a8c8-41aa-a214-ef7bc50df0a9",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "C:\\Users\\s.panigrahi\\Documents\\Projects\\DataStructureUsingJS\\test\\index.test.js",
        "passes": [
          {
            "title": "should be able to create a stack object.",
            "fullTitle": "Stack should be able to create a stack object.",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "ae7af754-bea6-44f9-8b3b-071535902309",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have 2 properties. top and length",
            "fullTitle": "Stack should have 2 properties. top and length",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
            "err": {},
            "isRoot": false,
            "uuid": "2b6dfd8d-9773-43ac-b187-e893de6d84a5",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say if stack is empty",
            "fullTitle": "Stack should say if stack is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
            "err": {},
            "isRoot": false,
            "uuid": "0a1093fe-c86f-4fd0-b579-f3ddc3e65beb",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to push",
            "fullTitle": "Stack should be able to push",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
            "err": {},
            "isRoot": false,
            "uuid": "49ca5f40-fff2-4922-a800-0a2298769102",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek",
            "fullTitle": "Stack should be able to peek",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
            "err": {},
            "isRoot": false,
            "uuid": "df56fb2c-4792-4b24-b933-eb9be9057637",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say determine if it is empty",
            "fullTitle": "Stack should say determine if it is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "25bd7a4c-dcb3-430e-b0be-019fca060ed7",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to pop",
            "fullTitle": "Stack should be able to pop",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "d226bf2d-3266-480a-a34f-09a492593670",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to clear all elements",
            "fullTitle": "Stack should be able to clear all elements",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
            "err": {},
            "isRoot": false,
            "uuid": "f1e84943-7be7-4add-acf0-900848be9c24",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to convert the instance as an array",
            "fullTitle": "Stack should be able to convert the instance as an array",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
            "err": {},
            "isRoot": false,
            "uuid": "661d3d6f-843a-450e-98a1-c9aae5593f37",
            "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 10,
        "rootEmpty": false
      },
      {
        "title": "Queue",
        "suites": [],
        "tests": [
          {
            "title": "should be able to create a instance of Queue",
            "fullTitle": "Queue should be able to create a instance of Queue",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(queue, _index2.default, \"Queue has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "6dc05f0c-392c-4841-864b-e03bc3efc389",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to enqueue",
            "fullTitle": "Queue should be able to enqueue",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nassert.equal(queue.getHead(), 1);\nassert.equal(queue.size, 1);",
            "err": {},
            "isRoot": false,
            "uuid": "15c62411-4bb5-4888-92ee-2de896729c38",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek at any location",
            "fullTitle": "Queue should be able to peek at any location",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nqueue.enQueue(2);\nassert.equal(queue.peekAt(1), 2);\nassert.equal(queue.peekAt(3), -1);",
            "err": {},
            "isRoot": false,
            "uuid": "a8961453-8ba1-4667-ab4c-23f45c9dd56a",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get the head",
            "fullTitle": "Queue should be able to get the head",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(4);\nassert.equal(queue.getHead(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "9e399c9f-035b-481e-9534-b231a0e3fbcf",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get all the elements by toString() as csv",
            "fullTitle": "Queue should be able to get all the elements by toString() as csv",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(queue.toString(), \"\");\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.equal(queue.toString(), \"1,2,3,4,5\");",
            "err": {},
            "isRoot": false,
            "uuid": "21f63608-8277-4d50-85a3-7dba06c864e4",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get all the elements by toArray() as an array",
            "fullTitle": "Queue should be able to get all the elements by toArray() as an array",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(queue.toArray(), null);\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.deepEqual(queue.toArray(), [1, 2, 3, 4, 5]);",
            "err": {},
            "isRoot": false,
            "uuid": "336b0e95-1f7a-48cf-9132-fb019802799f",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to remove elements using dequeue method",
            "fullTitle": "Queue should be able to remove elements using dequeue method",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nassert.equal(queue.size, 3);\nassert.equal(queue.deQueue(), 1);\nassert.equal(queue.size, 2);\nassert.equal(queue.size, 2);\nassert.equal(queue.deQueue(), 2);\nassert.equal(queue.size, 1);",
            "err": {},
            "isRoot": false,
            "uuid": "092da790-f756-4593-bdc3-d862aef3797e",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\index.test.js",
        "uuid": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Queue \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "queue = new _index2.default();",
            "err": {},
            "isRoot": false,
            "uuid": "30650e70-ef6a-4579-a4b4-6314f9c48d88",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Queue \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "queue.clear();",
            "err": {},
            "isRoot": false,
            "uuid": "1ce31964-f387-4e73-aadb-a35c3e741397",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "C:\\Users\\s.panigrahi\\Documents\\Projects\\DataStructureUsingJS\\test\\index.test.js",
        "passes": [
          {
            "title": "should be able to create a instance of Queue",
            "fullTitle": "Queue should be able to create a instance of Queue",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(queue, _index2.default, \"Queue has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "6dc05f0c-392c-4841-864b-e03bc3efc389",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to enqueue",
            "fullTitle": "Queue should be able to enqueue",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nassert.equal(queue.getHead(), 1);\nassert.equal(queue.size, 1);",
            "err": {},
            "isRoot": false,
            "uuid": "15c62411-4bb5-4888-92ee-2de896729c38",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek at any location",
            "fullTitle": "Queue should be able to peek at any location",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nqueue.enQueue(2);\nassert.equal(queue.peekAt(1), 2);\nassert.equal(queue.peekAt(3), -1);",
            "err": {},
            "isRoot": false,
            "uuid": "a8961453-8ba1-4667-ab4c-23f45c9dd56a",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get the head",
            "fullTitle": "Queue should be able to get the head",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(4);\nassert.equal(queue.getHead(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "9e399c9f-035b-481e-9534-b231a0e3fbcf",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get all the elements by toString() as csv",
            "fullTitle": "Queue should be able to get all the elements by toString() as csv",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(queue.toString(), \"\");\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.equal(queue.toString(), \"1,2,3,4,5\");",
            "err": {},
            "isRoot": false,
            "uuid": "21f63608-8277-4d50-85a3-7dba06c864e4",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to get all the elements by toArray() as an array",
            "fullTitle": "Queue should be able to get all the elements by toArray() as an array",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(queue.toArray(), null);\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.deepEqual(queue.toArray(), [1, 2, 3, 4, 5]);",
            "err": {},
            "isRoot": false,
            "uuid": "336b0e95-1f7a-48cf-9132-fb019802799f",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to remove elements using dequeue method",
            "fullTitle": "Queue should be able to remove elements using dequeue method",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "queue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nassert.equal(queue.size, 3);\nassert.equal(queue.deQueue(), 1);\nassert.equal(queue.size, 2);\nassert.equal(queue.size, 2);\nassert.equal(queue.deQueue(), 2);\nassert.equal(queue.size, 1);",
            "err": {},
            "isRoot": false,
            "uuid": "092da790-f756-4593-bdc3-d862aef3797e",
            "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 7,
        "totalPasses": 7,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "3ea959e1-efd7-47c4-9bb1-e7b939d60390",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should be able to create a stack object.",
      "fullTitle": "Stack should be able to create a stack object.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "ae7af754-bea6-44f9-8b3b-071535902309",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have 2 properties. top and length",
      "fullTitle": "Stack should have 2 properties. top and length",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
      "err": {},
      "isRoot": false,
      "uuid": "2b6dfd8d-9773-43ac-b187-e893de6d84a5",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say if stack is empty",
      "fullTitle": "Stack should say if stack is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
      "err": {},
      "isRoot": false,
      "uuid": "0a1093fe-c86f-4fd0-b579-f3ddc3e65beb",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to push",
      "fullTitle": "Stack should be able to push",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
      "err": {},
      "isRoot": false,
      "uuid": "49ca5f40-fff2-4922-a800-0a2298769102",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek",
      "fullTitle": "Stack should be able to peek",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
      "err": {},
      "isRoot": false,
      "uuid": "df56fb2c-4792-4b24-b933-eb9be9057637",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say determine if it is empty",
      "fullTitle": "Stack should say determine if it is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "25bd7a4c-dcb3-430e-b0be-019fca060ed7",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to pop",
      "fullTitle": "Stack should be able to pop",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "d226bf2d-3266-480a-a34f-09a492593670",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to clear all elements",
      "fullTitle": "Stack should be able to clear all elements",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
      "err": {},
      "isRoot": false,
      "uuid": "f1e84943-7be7-4add-acf0-900848be9c24",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to convert the instance as an array",
      "fullTitle": "Stack should be able to convert the instance as an array",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
      "err": {},
      "isRoot": false,
      "uuid": "661d3d6f-843a-450e-98a1-c9aae5593f37",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to create a instance of Queue",
      "fullTitle": "Queue should be able to create a instance of Queue",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(queue, _index2.default, \"Queue has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "6dc05f0c-392c-4841-864b-e03bc3efc389",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to enqueue",
      "fullTitle": "Queue should be able to enqueue",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nassert.equal(queue.getHead(), 1);\nassert.equal(queue.size, 1);",
      "err": {},
      "isRoot": false,
      "uuid": "15c62411-4bb5-4888-92ee-2de896729c38",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek at any location",
      "fullTitle": "Queue should be able to peek at any location",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nqueue.enQueue(2);\nassert.equal(queue.peekAt(1), 2);\nassert.equal(queue.peekAt(3), -1);",
      "err": {},
      "isRoot": false,
      "uuid": "a8961453-8ba1-4667-ab4c-23f45c9dd56a",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get the head",
      "fullTitle": "Queue should be able to get the head",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(4);\nassert.equal(queue.getHead(), 4);",
      "err": {},
      "isRoot": false,
      "uuid": "9e399c9f-035b-481e-9534-b231a0e3fbcf",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get all the elements by toString() as csv",
      "fullTitle": "Queue should be able to get all the elements by toString() as csv",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(queue.toString(), \"\");\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.equal(queue.toString(), \"1,2,3,4,5\");",
      "err": {},
      "isRoot": false,
      "uuid": "21f63608-8277-4d50-85a3-7dba06c864e4",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get all the elements by toArray() as an array",
      "fullTitle": "Queue should be able to get all the elements by toArray() as an array",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(queue.toArray(), null);\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.deepEqual(queue.toArray(), [1, 2, 3, 4, 5]);",
      "err": {},
      "isRoot": false,
      "uuid": "336b0e95-1f7a-48cf-9132-fb019802799f",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to remove elements using dequeue method",
      "fullTitle": "Queue should be able to remove elements using dequeue method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nassert.equal(queue.size, 3);\nassert.equal(queue.deQueue(), 1);\nassert.equal(queue.size, 2);\nassert.equal(queue.size, 2);\nassert.equal(queue.deQueue(), 2);\nassert.equal(queue.size, 1);",
      "err": {},
      "isRoot": false,
      "uuid": "092da790-f756-4593-bdc3-d862aef3797e",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should be able to create a stack object.",
      "fullTitle": "Stack should be able to create a stack object.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "ae7af754-bea6-44f9-8b3b-071535902309",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have 2 properties. top and length",
      "fullTitle": "Stack should have 2 properties. top and length",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
      "err": {},
      "isRoot": false,
      "uuid": "2b6dfd8d-9773-43ac-b187-e893de6d84a5",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say if stack is empty",
      "fullTitle": "Stack should say if stack is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
      "err": {},
      "isRoot": false,
      "uuid": "0a1093fe-c86f-4fd0-b579-f3ddc3e65beb",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to push",
      "fullTitle": "Stack should be able to push",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
      "err": {},
      "isRoot": false,
      "uuid": "49ca5f40-fff2-4922-a800-0a2298769102",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek",
      "fullTitle": "Stack should be able to peek",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
      "err": {},
      "isRoot": false,
      "uuid": "df56fb2c-4792-4b24-b933-eb9be9057637",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say determine if it is empty",
      "fullTitle": "Stack should say determine if it is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "25bd7a4c-dcb3-430e-b0be-019fca060ed7",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to pop",
      "fullTitle": "Stack should be able to pop",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "d226bf2d-3266-480a-a34f-09a492593670",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to clear all elements",
      "fullTitle": "Stack should be able to clear all elements",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
      "err": {},
      "isRoot": false,
      "uuid": "f1e84943-7be7-4add-acf0-900848be9c24",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to convert the instance as an array",
      "fullTitle": "Stack should be able to convert the instance as an array",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
      "err": {},
      "isRoot": false,
      "uuid": "661d3d6f-843a-450e-98a1-c9aae5593f37",
      "parentUUID": "b8efeb5a-2a77-4f59-b86c-b4c36d65067a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to create a instance of Queue",
      "fullTitle": "Queue should be able to create a instance of Queue",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(queue, _index2.default, \"Queue has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "6dc05f0c-392c-4841-864b-e03bc3efc389",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to enqueue",
      "fullTitle": "Queue should be able to enqueue",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nassert.equal(queue.getHead(), 1);\nassert.equal(queue.size, 1);",
      "err": {},
      "isRoot": false,
      "uuid": "15c62411-4bb5-4888-92ee-2de896729c38",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek at any location",
      "fullTitle": "Queue should be able to peek at any location",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nassert.equal(queue.peekAt(0), 1);\nqueue.enQueue(2);\nassert.equal(queue.peekAt(1), 2);\nassert.equal(queue.peekAt(3), -1);",
      "err": {},
      "isRoot": false,
      "uuid": "a8961453-8ba1-4667-ab4c-23f45c9dd56a",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get the head",
      "fullTitle": "Queue should be able to get the head",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(4);\nassert.equal(queue.getHead(), 4);",
      "err": {},
      "isRoot": false,
      "uuid": "9e399c9f-035b-481e-9534-b231a0e3fbcf",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get all the elements by toString() as csv",
      "fullTitle": "Queue should be able to get all the elements by toString() as csv",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(queue.toString(), \"\");\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.equal(queue.toString(), \"1,2,3,4,5\");",
      "err": {},
      "isRoot": false,
      "uuid": "21f63608-8277-4d50-85a3-7dba06c864e4",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to get all the elements by toArray() as an array",
      "fullTitle": "Queue should be able to get all the elements by toArray() as an array",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(queue.toArray(), null);\nqueue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nqueue.enQueue(4);\nqueue.enQueue(5);\nassert.deepEqual(queue.toArray(), [1, 2, 3, 4, 5]);",
      "err": {},
      "isRoot": false,
      "uuid": "336b0e95-1f7a-48cf-9132-fb019802799f",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to remove elements using dequeue method",
      "fullTitle": "Queue should be able to remove elements using dequeue method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "queue.enQueue(1);\nqueue.enQueue(2);\nqueue.enQueue(3);\nassert.equal(queue.size, 3);\nassert.equal(queue.deQueue(), 1);\nassert.equal(queue.size, 2);\nassert.equal(queue.size, 2);\nassert.equal(queue.deQueue(), 2);\nassert.equal(queue.size, 1);",
      "err": {},
      "isRoot": false,
      "uuid": "092da790-f756-4593-bdc3-d862aef3797e",
      "parentUUID": "4b2bcbbe-6238-462d-aac8-a9b55f53d8e6",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}